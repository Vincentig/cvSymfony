<?php

namespace AppBundle\Repository;

use \Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonneRepository extends \Doctrine\ORM\EntityRepository {

    public function getArticlesDeLAnneeEnCours() {
//$querybuilder = $this->_em->createQueryBuilder()->select('a')->from('AppBundle:Article', 'a');
//OU
        $querybuilder = $this->createQueryBuilder('a');
//        $querybuilder->where('a.publication = :publication')
//                ->setParameter('publication', '1')
//                ->andWhere('YEAR(a.date) = :annee')
//                ->setParameter('annee', 2015);

        $date = new \DateTime();
        $annee = $date->format('Y');
        $querybuilder->where('a.publication = :publication')
                ->setParameter('publication', 1)
                ->andWhere('a.date >= :annee')
                ->setParameter('annee', $annee)
                ->orderBy('a.date', 'DESC');


        $query = $querybuilder->getQuery();
        return $query->getResult();
    }

    public function getArticles($nbParPage, $page) {



        $date = new \DateTime();
        $annee = $date->format('Y');
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.categories', 'c')
                ->addSelect('c')
                ->Where('a.publication = :publication')
                ->setParameter('publication', 1)
                ->andWhere('a.date >= :annee')
                ->setParameter('annee', $annee)
                ->orderBy('a.date', 'DESC')
                ->setFirstResult(($page - 1) * $nbParPage)
                ->setMaxResults($nbParPage);

        //$query = $qb->getQuery();
        //return $query->getResult();
        return new Paginator($qb);
    }

    public function getArticlesByCategorie($nbParPage, $page, $titre) {

        $date = new \DateTime();
        $annee = $date->format('Y');
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.categories', 'c')
                ->addSelect('c')
                ->Where('a.publication = :publication')
                ->setParameter('publication', 1)
                ->andWhere('c.titre = :titre')
                ->setParameter('titre', $titre)
                ->setFirstResult(($page - 1) * $nbParPage)
                ->setMaxResults($nbParPage);

        //$query = $qb->getQuery();
        //return $query->getResult();
        return new Paginator($qb);
    }

    public function getFullCv($id)
    {
        $queryBuilder = $this->createQueryBuilder('cv')
            ->leftJoin('cv.experiences','exp')
            ->addSelect('exp')
            ->leftJoin('cv.formations', 'formations')
            ->addSelect('formations')
            ->leftJoin('cv.skills','skills')
            ->addSelect('skills')
            ->leftJoin('exp.skills','expskills')
            ->addSelect('expskills')
            ->leftJoin('formations.skills','formationSills')
            ->addSelect('formationSills')
            ->where('cv.id = :id')
            ->setParameter('id',$id)
            ->addOrderBy('formations.dateFin ','DESC')
            ->addOrderBy('exp.dateFin ','DESC');


        return $queryBuilder->getQuery()->getSingleResult();
    }

}
